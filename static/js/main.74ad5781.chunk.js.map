{"version":3,"sources":["serviceWorker.ts","components/model/Model.tsx","redux/selectors/selectors.tsx","redux/reducers/index.tsx","redux/actions/constants.tsx","redux/store/configureStore.tsx","redux/actions/index.tsx","history/history.tsx","components/Years.tsx","components/MonthDetailSection.tsx","components/MonthDetail.tsx","components/Months.tsx","components/YearDetail.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","CategoryType","MONTHS","label","value","initData","year","yearData","yearNumber","Date","getFullYear","data","index","push","monthIndex","amount","type","EXPENSE","addCategory","categoryName","map","modifiedYearData","monthData","concat","updateCategory","oldLabel","newLabel","modifiedMonthData","categoryData","getSelectedMonth","state","filter","selectedYear","selectedMonth","getExpenseCategoriesWithData","getIncomeCategoriesWithData","INCOME","getAllCategoryLabels","getSelectedPeriod","currentMonth","forEach","month","getAllAvailableYears","getSumOfExpenses","reduce","a","b","getSumOfIncomes","appInitialState","rootReducer","combineReducers","app","action","payload","selectedMonthData","enhancers","compose","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","selectMonth","createBrowserHistory","Years","handleYearSelected","props","selectYear","history","className","this","allAvailableYears","key","onClick","Component","connect","dispatch","actions","MonthDetailSection","editCategoryInput","editCategoryLabelInput","newCategoryInput","escapeHandler","event","keyCode","cleanAddCategory","cleanEditState","cleanCategoryEditState","handleRowClicked","setState","editRow","rowData","toString","setTimeout","current","focus","handleSubmit","preventDefault","updateCategoryAmount","Number","handleAmountChange","currentTarget","handleAddNewCategorySubmit","newCategoryName","newCategoryType","handleNewCategoryChange","handleAddNewCategoryClicked","handleCategoryLabelClicked","categoryLabel","editCategory","handleNewLabelChange","handleNewLabelSubmit","allCategoryLabels","includes","React","createRef","document","addEventListener","removeEventListener","categoriesWithData","categoryWithAmount","onSubmit","placeholder","ref","onBlur","onChange","step","sumOfExpenses","sumOfIncomes","defaultProps","updatedCategory","newCategory","renamedCategory","MonthDetail","selectedPeriod","expenseCategoriesWithData","incomeCategoriesWithData","Months","handleMonthClicked","handleSelectYearsScreenClicked","months","YearDetail","App","to","render","component","exact","path","withRouter","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74ad5781.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export interface Item {\n    label: string,\n    value: any,\n}\n\nexport enum CategoryType {\n    EXPENSE = \"EXPENSE\",\n    INCOME = \"INCOME\",\n}\n\nexport interface RenamedCategory {\n    oldLabel: string,\n    newLabel: string,\n}\n\nexport interface NewCategory {\n    label: string,\n    type: CategoryType,\n}\n\nexport interface CategoryWithAmount {\n    label: string,\n    amount: number,\n    type: CategoryType,\n}\n\nexport interface MonthData {\n    monthIndex: number,\n    data: CategoryWithAmount[],\n}\n\nexport interface YearData {\n    yearNumber: number,\n    data: MonthData[],\n}\n\nexport const MONTHS: Item[] = [\n    {label: \"January\", value: 0},\n    {label: \"February\", value: 1},\n    {label: \"March\", value: 2},\n    {label: \"April\", value: 3},\n    {label: \"May\", value: 4},\n    {label: \"June\", value: 5},\n    {label: \"July\", value: 6},\n    {label: \"August\", value: 7},\n    {label: \"September\", value: 8},\n    {label: \"October\", value: 9},\n    {label: \"November\", value: 10},\n    {label: \"December\", value: 11},\n];\n\nexport const initData = (year?: number): YearData => {\n    const setupYear = year? year : new Date().getFullYear();\n    const yearData: YearData = {yearNumber: setupYear, data: []};\n\n    let index = 0;\n    while (index < 12) {\n        yearData.data.push({\n            monthIndex: index,\n            data: [\n                {\n                    label: \"Example Category\",\n                    amount: 1000 + index * 10,\n                    type: CategoryType.EXPENSE,\n                },\n            ]\n        });\n        index++;\n    }\n    return yearData;\n};\n\nexport const addCategory = (data: YearData[], categoryName: string, type: CategoryType): YearData[] => {\n    return data.map(yearData => {\n        const modifiedYearData = yearData.data.map(monthData => {\n            return {\n                ...monthData, data: monthData.data.concat({\n                    label: categoryName,\n                    amount: 0,\n                    type: type,\n                })\n            }\n        });\n        return {\n            ...yearData, data: modifiedYearData\n        };\n    });\n};\n\nexport const updateCategory = (data: YearData[], oldLabel: string, newLabel: string): YearData[] => {\n    return data.map(yearData => {\n        const modifiedYearData = yearData.data.map(monthData => {\n            const modifiedMonthData = monthData.data.map(categoryData => {\n                if (categoryData.label === oldLabel) {\n                    return {\n                        ...categoryData, label: newLabel\n                    }\n                } else {\n                    return {\n                        ...categoryData\n                    }\n                }\n            });\n            return {\n                ...monthData, data: modifiedMonthData\n            }\n        });\n        return {\n            ...yearData, data: modifiedYearData\n        };\n    });\n};","import {CategoryType, CategoryWithAmount, MonthData, MONTHS} from \"../../components/model/Model\";\nimport {AppState} from \"../reducers\";\n\nexport const getSelectedMonth = (state): MonthData => {\n    const filteredYearData = state.data.filter(yearData => yearData.yearNumber === state.selectedYear);\n    const filteredMonthData = filteredYearData[0].data.filter(monthData => monthData.monthIndex === state.selectedMonth);\n    return filteredMonthData[0];\n};\n\nexport const getExpenseCategoriesWithData = (state: AppState): CategoryWithAmount[] => {\n    return getSelectedMonth(state).data.filter(categoryData => categoryData.type === CategoryType.EXPENSE)\n};\n\nexport const getIncomeCategoriesWithData = (state: AppState): CategoryWithAmount[] => {\n    return getSelectedMonth(state).data.filter(categoryData => categoryData.type === CategoryType.INCOME)\n};\n\nexport const getAllCategoryLabels = (state: AppState): string[] => {\n    return state.data[0].data[0].data.map(categoryData => categoryData.label);\n};\n\nexport const getSelectedPeriod = (state: AppState): string => {\n    let currentMonth = \"\";\n    MONTHS.forEach(month => {\n        if (month.value === state.selectedMonth) {\n            currentMonth = month.label;\n        }\n    });\n    return \"Year \" + state.selectedYear + \", Month \" + currentMonth;\n};\n\nexport const getAllAvailableYears = (state: AppState): number[] => {\n    return state.data.map(yearData => yearData.yearNumber);\n};\n\nexport const getSumOfExpenses = (state: AppState): number => {\n    const filteredData = getSelectedMonth(state).data.map(categoryData =>\n        (categoryData.type === CategoryType.EXPENSE) ? categoryData.amount : null);\n    return filteredData.reduce((a, b) => a + b);\n};\n\nexport const getSumOfIncomes = (state: AppState): number => {\n    const filteredData = getSelectedMonth(state).data.map(categoryData =>\n        (categoryData.type === CategoryType.INCOME) ? categoryData.amount : null);\n    return filteredData.reduce((a, b) => a + b);\n};","import {addCategory, initData, updateCategory, YearData} from \"../../components/model/Model\";\nimport {combineReducers} from 'redux'\nimport * as c from \"../actions/constants\";\nimport {getSelectedMonth} from \"../selectors/selectors\";\n\nexport interface AppState {\n    data: YearData[],\n    selectedYear: number,\n    selectedMonth: number,\n}\n\nexport const appInitialState: AppState = {\n    selectedYear: 2019,\n    selectedMonth: 0,\n    data: [initData(), initData(2018), initData(2017)],\n};\n\nexport interface CombinedAppState {\n    app: AppState,\n}\n\nconst appReducer = (state = appInitialState, action) => {\n    switch (action.type) {\n        case c.UPDATE_DATA: {\n            return {\n                ...state, data: action.payload\n            };\n        }\n        case c.SELECT_MONTH: {\n            return {\n                ...state, selectedMonth: action.payload\n            };\n        }\n        case c.ADD_CATEGORY: {\n            return {\n                ...state, data: addCategory(state.data, action.payload.label, action.payload.type)\n            };\n        }\n        case c.UPDATE_CATEGORY: {\n            return {\n                ...state, data: updateCategory(state.data, action.payload.oldLabel, action.payload.newLabel)\n            };\n        }\n        case c.UPDATE_CATEGORY_AMOUNT: {\n            return {\n                ...state, selectedMonthData: {\n                    data: getSelectedMonth(state).data.map(categoryData => {\n                        if (categoryData.label === action.payload.label) {\n                            categoryData.amount = action.payload.amount;\n                        }\n                        return categoryData;\n                    }), monthIndex: getSelectedMonth(state).monthIndex\n                }\n            };\n        }\n        case c.SELECT_YEAR: {\n            return {\n                ...state, selectedYear: action.payload\n            }\n        }\n        default:\n            return state;\n    }\n};\n\nconst rootReducer = combineReducers({\n    app: appReducer,\n});\n\nexport default rootReducer;","export const ADD_CATEGORY = \"ADD_CATEGORY\";\nexport const UPDATE_CATEGORY = \"UPDATE_CATEGORY\";\nexport const UPDATE_CATEGORY_AMOUNT = \"UPDATE_CATEGORY_AMOUNT\";\n\nexport const SELECT_MONTH = \"SELECT_MONTH\";\n\nexport const UPDATE_DATA = \"UPDATE_DATA\";\n\nexport const SELECT_YEAR = \"SELECT_YEAR\";","import { createStore, compose } from \"redux\";\nimport rootReducer from \"../reducers/index\";\n\nconst enhancers = compose(\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nconst store = createStore(\n    rootReducer,\n    enhancers\n);\n\nexport default store;","import * as c from './constants';\n\nexport const addCategory = (payload) => {\n    return { type:  c.ADD_CATEGORY, payload };\n};\n\nexport const updateCategory = (payload) => {\n    return { type:  c.UPDATE_CATEGORY, payload };\n};\n\nexport const updateCategoryAmount = (payload) => {\n    return { type:  c.UPDATE_CATEGORY_AMOUNT, payload };\n};\n\nexport const selectMonth = (payload) => {\n    return { type:  c.SELECT_MONTH, payload };\n};\n\nexport const updateAppData = (payload) => {\n    return { type:  c.UPDATE_DATA, payload };\n};\n\nexport const selectYear = (payload) => {\n    return { type:  c.SELECT_YEAR, payload };\n};","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport './Years.scss';\nimport {CombinedAppState} from \"../redux/reducers\";\nimport * as actions from \"../redux/actions\";\nimport history from \"../history/history\";\nimport {getAllAvailableYears} from \"../redux/selectors/selectors\";\n\nconst mapStateToProps = (state: CombinedAppState) => {\n    return {\n        selectedYear: state.app.selectedYear,\n        allAvailableYears: getAllAvailableYears(state.app),\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        selectYear: year => dispatch(actions.selectYear(year)),\n        selectMonth: monthIndex => dispatch(actions.selectMonth(monthIndex)),\n    }\n};\n\ninterface ComponentStateProps {\n    selectedYear: number,\n    allAvailableYears: number[],\n}\n\ninterface ComponentDispatchProps {\n    selectYear: (year: number) => void,\n    selectMonth: (monthIndex: number) => void,\n}\n\ninterface ComponentOwnProps {\n}\n\ntype ComponentProps = ComponentStateProps & ComponentDispatchProps & ComponentOwnProps;\n\ninterface ComponentState {\n}\n\nclass Years extends Component<ComponentProps, ComponentState> {\n\n\n    handleYearSelected = (year: number) => {\n        this.props.selectYear(year);\n        this.props.selectMonth(0);\n        history.push(\"/year-detail\");\n    };\n\n    render() {\n        return (\n            <div className=\"years-wrapper\">\n                <h4>Years With Records</h4>\n                <div className=\"list-group\">\n                    {this.props.allAvailableYears.map(year => (\n                        <div key={year}\n                             className={\"list-group-item list-group-item-action \" + (this.props.selectedYear === year ? \"active\" : null)}\n                            onClick={() => this.handleYearSelected(year)}>\n                            {year}\n                        </div>\n                    ))}\n                </div>\n\n                <button type=\"button\" className=\"btn btn-outline-info btn-sm\">\n                    Add a Year\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default connect <ComponentStateProps, ComponentDispatchProps, ComponentOwnProps>\n(mapStateToProps, mapDispatchToProps)(Years);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport './MonthDetailSection.scss';\nimport {CombinedAppState} from \"../redux/reducers\";\nimport {CategoryType, CategoryWithAmount, NewCategory, RenamedCategory} from \"./model/Model\";\nimport * as actions from \"../redux/actions\";\nimport {getAllCategoryLabels, getSumOfExpenses, getSumOfIncomes} from \"../redux/selectors/selectors\";\n\nconst mapStateToProps = (state: CombinedAppState) => {\n    return {\n        allCategoryLabels: getAllCategoryLabels(state.app),\n        sumOfExpenses: getSumOfExpenses(state.app),\n        sumOfIncomes: getSumOfIncomes(state.app),\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateCategoryAmount: updatedCategory => dispatch(actions.updateCategoryAmount(updatedCategory)),\n        addCategory: newCategory => dispatch(actions.addCategory(newCategory)),\n        updateCategory: renamedCategory => dispatch(actions.updateCategory(renamedCategory)),\n    }\n};\n\ninterface ComponentStateProps {\n    allCategoryLabels: string[],\n    sumOfExpenses: number,\n    sumOfIncomes: number,\n}\n\ninterface ComponentDispatchProps {\n    updateCategoryAmount: (updatedCategory: CategoryWithAmount) => void,\n    addCategory: (newCategory: NewCategory) => void,\n    updateCategory: (updateCategoryLabel: RenamedCategory) => void,\n}\n\ninterface ComponentOwnProps {\n    categoriesWithData: CategoryWithAmount[],\n    type: CategoryType,\n}\n\ntype ComponentProps = ComponentStateProps & ComponentDispatchProps & ComponentOwnProps;\n\ninterface ComponentState {\n    editRow: number,\n    rowData: string,\n    editCategory: number,\n    categoryData: string,\n    newCategoryName: string,\n    newCategoryType: CategoryType,\n}\n\nclass MonthDetailSection extends Component<ComponentProps, ComponentState> {\n    static defaultProps = {\n        categoriesWithData: [],\n        type: CategoryType.EXPENSE,\n    };\n\n    private readonly editCategoryInput: React.RefObject<HTMLInputElement>;\n    private readonly editCategoryLabelInput: React.RefObject<HTMLInputElement>;\n    private readonly newCategoryInput: React.RefObject<HTMLInputElement>;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            editRow: null,\n            rowData: \"\",\n            editCategory: null,\n            categoryData: \"\",\n            newCategoryName: \"\",\n            newCategoryType: null,\n        };\n\n        this.editCategoryInput = React.createRef();\n        this.editCategoryLabelInput = React.createRef();\n        this.newCategoryInput = React.createRef();\n    }\n\n    componentDidMount(){\n        document.addEventListener(\"keydown\", this.escapeHandler, false);\n    }\n    componentWillUnmount(){\n        document.removeEventListener(\"keydown\", this.escapeHandler, false);\n    }\n\n    escapeHandler = (event) => {\n        if (event.keyCode === 27) {\n            this.cleanAddCategory();\n            this.cleanEditState();\n            this.cleanCategoryEditState();\n        }\n    };\n\n    handleRowClicked = (index: number, amount: number) => {\n        this.setState({editRow: index, rowData: amount.toString()});\n        setTimeout(() => this.editCategoryInput.current.focus(), 50);\n    };\n\n    handleSubmit = (event: React.FormEvent<HTMLFormElement>, categoryData: CategoryWithAmount) => {\n        event.preventDefault();\n        this.props.updateCategoryAmount(\n            {label: categoryData.label, amount: Number(this.state.rowData)} as CategoryWithAmount);\n        this.cleanEditState();\n    };\n\n    handleAmountChange = (event: React.FormEvent<HTMLInputElement>) => {\n        this.setState({rowData: event.currentTarget.value});\n    };\n\n    cleanEditState = () => {\n        this.setState({editRow: null, rowData: \"\"});\n    };\n\n    //\n\n    handleAddNewCategorySubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        if (!this.state.newCategoryName) {\n            return;\n        }\n        this.props.addCategory({label: this.state.newCategoryName, type: this.state.newCategoryType} as NewCategory);\n        this.cleanAddCategory();\n    };\n\n    handleNewCategoryChange = (event: React.FormEvent<HTMLInputElement>) => {\n        this.setState({newCategoryName: event.currentTarget.value});\n    };\n\n    handleAddNewCategoryClicked = () => {\n        this.setState({newCategoryName: \"\", newCategoryType: this.props.type});\n        setTimeout(() => this.newCategoryInput.current.focus(), 50);\n    };\n\n    cleanAddCategory = () => {\n        this.setState({newCategoryName: \"\", newCategoryType: null});\n    };\n\n    //\n\n    handleCategoryLabelClicked = (index: number, categoryLabel: string) => {\n        this.setState({editCategory: index, categoryData: categoryLabel});\n        setTimeout(() => this.editCategoryLabelInput.current.focus(), 50);\n    };\n\n    cleanCategoryEditState = () => {\n        this.setState({editCategory: null, categoryData: \"\"});\n    };\n\n    handleNewLabelChange = (event: React.FormEvent<HTMLInputElement>) => {\n        this.setState({categoryData: event.currentTarget.value});\n    };\n\n    handleNewLabelSubmit = (event: React.FormEvent<HTMLFormElement>, oldLabel: string) => {\n        event.preventDefault();\n        if (!this.props.allCategoryLabels.includes(this.state.categoryData)) {\n            this.props.updateCategory(\n                {oldLabel: oldLabel, newLabel: this.state.categoryData} as RenamedCategory);\n            this.cleanCategoryEditState();\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <ul className=\"list-group\">\n                    {this.props.categoriesWithData.map((categoryWithAmount, index) => (\n                        <li key={index} className=\"list-group-item\">\n                            <div className={\"section-label\"}>\n                                {this.state.editCategory === index ?\n                                    <form onSubmit={(event) => this.handleNewLabelSubmit(event, categoryWithAmount.label)}>\n                                        <div className=\"form-group\">\n                                            <input\n                                                type=\"text\"\n                                                className=\"form-control form-control-sm\"\n                                                value={this.state.categoryData}\n                                                placeholder=\"Enter Category Name\"\n                                                ref={this.editCategoryLabelInput}\n                                                onBlur={() => this.cleanCategoryEditState()}\n                                                onChange={this.handleNewLabelChange}/>\n                                        </div>\n                                    </form>\n                                    :\n                                    <div onClick={() => this.handleCategoryLabelClicked(index, categoryWithAmount.label)}>\n                                        {categoryWithAmount.label}\n                                    </div>\n                                }\n                            </div>\n\n                            <div className={\"section-data\"}>\n                                {this.state.editRow === index ?\n                                    <form onSubmit={(event) => this.handleSubmit(event, categoryWithAmount)}>\n                                        <div className=\"form-group\">\n                                            <input\n                                                type=\"number\"\n                                                step=\"0.01\"\n                                                className=\"form-control form-control-sm\"\n                                                value={this.state.rowData}\n                                                placeholder=\"Enter Value\"\n                                                ref={this.editCategoryInput}\n                                                onBlur={() => this.cleanEditState()}\n                                                onChange={this.handleAmountChange}/>\n                                        </div>\n                                    </form>\n                                    :\n                                    <div onClick={() => this.handleRowClicked(index, categoryWithAmount.amount)}>\n                                        {categoryWithAmount.amount}\n                                    </div>\n                                }\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n\n                <div className=\"add-new-category\">\n                    {this.state.newCategoryType ?\n                        <form onSubmit={(event) => this.handleAddNewCategorySubmit(event)}>\n                            <div className=\"form-group\">\n                                <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    value={this.state.newCategoryName}\n                                    placeholder=\"Enter New Category Name\"\n                                    ref={this.newCategoryInput}\n                                    onBlur={() => this.cleanAddCategory()}\n                                    onChange={this.handleNewCategoryChange}/>\n                            </div>\n                        </form>\n                        :\n                        (this.props.type === CategoryType.EXPENSE ?\n                                <>\n                                    <button type=\"button\" className=\"btn btn-danger btn-sm\"\n                                        onClick={() => this.handleAddNewCategoryClicked()}>Add Expense Category</button>\n                                    <span className={\"total-sum\"}>Total: {this.props.sumOfExpenses}</span>\n                                </>\n                            :\n                                <>\n                                    <button type=\"button\" className=\"btn btn-success btn-sm\"\n                                        onClick={() => this.handleAddNewCategoryClicked()}>Add Income Category</button>\n                                    <span className={\"total-sum\"}>Total: {this.props.sumOfIncomes}</span>\n                                </>\n                        )\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect <ComponentStateProps, ComponentDispatchProps, ComponentOwnProps>\n(mapStateToProps, mapDispatchToProps)(MonthDetailSection);","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport {\n    CombinedAppState,\n\n\n} from \"../redux/reducers\";\nimport {CategoryType, CategoryWithAmount} from \"./model/Model\";\nimport MonthDetailSection from \"./MonthDetailSection\";\nimport {\n    getExpenseCategoriesWithData,\n    getIncomeCategoriesWithData,\n    getSelectedPeriod\n} from \"../redux/selectors/selectors\";\n\n\nconst mapStateToProps = (state: CombinedAppState) => {\n    return {\n        expenseCategoriesWithData: getExpenseCategoriesWithData(state.app),\n        incomeCategoriesWithData: getIncomeCategoriesWithData(state.app),\n        selectedPeriod: getSelectedPeriod(state.app),\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n    }\n};\n\ninterface ComponentStateProps {\n    expenseCategoriesWithData: CategoryWithAmount[],\n    incomeCategoriesWithData: CategoryWithAmount[],\n    selectedPeriod: string,\n}\n\ninterface ComponentDispatchProps {\n}\n\ninterface ComponentOwnProps {\n}\n\ntype ComponentProps = ComponentStateProps & ComponentDispatchProps & ComponentOwnProps;\n\ninterface ComponentState {\n}\n\nclass MonthDetail extends Component<ComponentProps, ComponentState> {\n    public static defaultProps = {\n        expenseCategoriesWithData: [],\n        incomeCategoriesWithData: [],\n    };\n\n    render() {\n        return (\n            <div className=\"month-detail-wrapper\">\n                <h4>Month Detail</h4><h6>{this.props.selectedPeriod}</h6>\n                <MonthDetailSection categoriesWithData={this.props.expenseCategoriesWithData} type={CategoryType.EXPENSE} />\n                <MonthDetailSection categoriesWithData={this.props.incomeCategoriesWithData} type={CategoryType.INCOME} />\n            </div>\n        )\n    }\n}\n\nexport default connect <ComponentStateProps, ComponentDispatchProps, ComponentOwnProps>\n    (mapStateToProps, mapDispatchToProps)(MonthDetail);","import React, {Component} from \"react\";\nimport './Months.scss';\nimport {Item, MONTHS} from \"./model/Model\";\nimport {connect} from \"react-redux\";\nimport {CombinedAppState} from \"../redux/reducers\";\nimport * as actions from \"../redux/actions\";\nimport history from \"../history/history\";\n\nconst mapStateToProps = (state: CombinedAppState) => {\n    return {\n        selectedYear: state.app.selectedYear,\n        selectedMonth: state.app.selectedMonth,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        selectMonth: monthIndex => dispatch(actions.selectMonth(monthIndex)),\n    }\n};\n\ninterface ComponentStateProps {\n    selectedYear: number,\n    selectedMonth: number,\n}\n\ninterface ComponentDispatchProps {\n    selectMonth: (monthIndex: number) => void,\n}\n\n\ninterface ComponentOwnProps {\n}\n\ntype ComponentProps = ComponentStateProps & ComponentDispatchProps & ComponentOwnProps;\n\ninterface ComponentState {\n    months: Item[],\n}\n\nclass Months extends Component<ComponentProps, ComponentState> {\n    public static defaultProps = {\n        selectedYear: 2019,\n        selectedMonth: 0,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            months: MONTHS,\n        }\n    }\n\n    handleMonthClicked = (value: number) => {\n        this.props.selectMonth(value);\n    };\n\n    handleSelectYearsScreenClicked = () => {\n        history.push(\"/years\");\n    };\n\n    render() {\n        return (\n            <div className=\"months-wrapper\">\n                <h4>Months of {this.props.selectedYear}</h4>\n                <button type=\"button\" className=\"btn btn-outline-info btn-sm back-to-years\"\n                    onClick={() => this.handleSelectYearsScreenClicked()}>\n                    Back to Years\n                </button>\n                <div className=\"list-group\">\n                    {this.state.months.map(month => (\n                        <div key={month.value}\n                             className={\"list-group-item list-group-item-action \" + (this.props.selectedMonth === month.value ? \"active\" : null)}\n                             onClick={() => this.handleMonthClicked(month.value)}>\n                            {month.label}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect <ComponentStateProps, ComponentDispatchProps, ComponentOwnProps>\n(mapStateToProps, mapDispatchToProps)(Months);","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport './YearDetail.scss';\nimport MonthDetail from \"./MonthDetail\";\nimport Months from \"./Months\";\nimport {CombinedAppState} from \"../redux/reducers\";\n\nconst mapStateToProps = (state: CombinedAppState) => {\n    return {\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n    }\n};\n\ninterface ComponentStateProps {\n}\n\ninterface ComponentDispatchProps {\n}\n\ninterface ComponentOwnProps {\n}\n\ntype ComponentProps = ComponentStateProps & ComponentDispatchProps & ComponentOwnProps;\n\ninterface ComponentState {\n}\n\nclass YearDetail extends Component<ComponentProps, ComponentState> {\n    render() {\n        return (\n            <div className=\"year-detail-wrapper\">\n                <Months/>\n                < MonthDetail />\n            </div>\n        );\n    }\n}\n\nexport default connect <ComponentStateProps, ComponentDispatchProps, ComponentOwnProps>\n(mapStateToProps, mapDispatchToProps)(YearDetail);","import React, {Component} from \"react\";\nimport './App.scss';\nimport { Redirect } from 'react-router-dom'\n\nclass App extends Component {\n    render () {\n      return (\n          <Redirect to=\"/years\" />\n      );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.scss';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/store/configureStore\";\nimport { Route, Router, withRouter } from 'react-router-dom'\nimport Years from \"./components/Years\";\nimport YearDetail from \"./components/YearDetail\";\nimport history from \"./history/history\";\nimport App from \"./App\";\n\nrender(\n    <Provider store={store}>\n        <Router history={history}>\n            <Route component={App} />\n            <Route exact path=\"/years\" component={withRouter(Years)}/>\n            <Route exact path=\"/year-detail\" component={withRouter(YearDetail)}/>\n        </Router>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}